

# Semantic Commit Messages

See how a small change in your commit message style can make you a better programmer.

Format: `<type>(<scope>): <message>`

`<scope>` is optional

## Example 

```
feat: add footer
^--^  ^------------^
|     |
|     +-> Summary of what was done
|
+-------> Types: chore, docs, feat, fix, refactor, style, or test.
```

More Examples:

- `feat`: (new feature for the user, NOT a new script feature)
- `fix`: (bug fix for the user, NOT a script bug fix)
- `docs`: (changes to documentation)
- `style`: (formatting, adding ';', etc; nothing that changes production code)
- `refactor`: (refactoring production code, e.g. renaming a variable)
- `test`: (adding missing tests, refactoring tests; no changes to production code)
- `chore`: (updating grunt tasks etc; nothing that changes production code)
